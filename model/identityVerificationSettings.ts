/**
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class IdentityVerificationSettings {
    'type'?: IdentityVerificationSettings.TypeEnum;
    'maximumRetryCount'?: number | null;
    'requireLiveCapture'?: boolean | null;
    'requireMatchingSelfie'?: boolean | null;
    'nameMatcher'?: IdentityVerificationSettings.NameMatcherEnum;
    'holdForPrefill'?: boolean | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "IdentityVerificationSettings.TypeEnum"
        },
        {
            "name": "maximumRetryCount",
            "baseName": "maximumRetryCount",
            "type": "number"
        },
        {
            "name": "requireLiveCapture",
            "baseName": "requireLiveCapture",
            "type": "boolean"
        },
        {
            "name": "requireMatchingSelfie",
            "baseName": "requireMatchingSelfie",
            "type": "boolean"
        },
        {
            "name": "nameMatcher",
            "baseName": "nameMatcher",
            "type": "IdentityVerificationSettings.NameMatcherEnum"
        },
        {
            "name": "holdForPrefill",
            "baseName": "holdForPrefill",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return IdentityVerificationSettings.attributeTypeMap;
    }
}

export namespace IdentityVerificationSettings {
    export enum TypeEnum {
        EveryAccess = <any> 'EveryAccess',
        UntilSignCompleted = <any> 'UntilSignCompleted',
        OncePerDocument = <any> 'OncePerDocument'
    }
    export enum NameMatcherEnum {
        Strict = <any> 'Strict',
        Moderate = <any> 'Moderate',
        Lenient = <any> 'Lenient'
    }
}
