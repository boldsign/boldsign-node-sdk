/**
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AttachmentInfo } from './attachmentInfo';
import { ConditionalRule } from './conditionalRule';
import { EditableDateFieldSettings } from './editableDateFieldSettings';
import { FileInfo } from './fileInfo';
import { FormulaFieldSettings } from './formulaFieldSettings';
import { ImageInfo } from './imageInfo';
import { Rectangle } from './rectangle';

export class DocumentFormFields {
    'id'?: string | null;
    'type'?: string | null;
    'value'?: string | null;
    'font'?: string | null;
    'isRequired'?: boolean;
    'isReadOnly'?: boolean;
    'lineHeight'?: number;
    'fontSize'?: number;
    'fontColor'?: string | null;
    'isUnderline'?: boolean;
    'isItalic'?: boolean;
    'isBold'?: boolean;
    'groupName'?: string | null;
    'label'?: string | null;
    'placeholder'?: string | null;
    'validationtype'?: DocumentFormFields.ValidationtypeEnum;
    'validationCustomRegex'?: string | null;
    'validationCustomRegexMessage'?: string | null;
    'dateFormat'?: string | null;
    'timeFormat'?: string | null;
    'imageInfo'?: ImageInfo;
    'attachmentInfo'?: AttachmentInfo;
    'fileInfo'?: FileInfo;
    'editableDateFieldSettings'?: EditableDateFieldSettings;
    'hyperlinkText'?: string | null;
    'conditionalRules'?: Array<ConditionalRule> | null;
    'bounds'?: Rectangle;
    'pageNumber'?: number;
    'dataSyncTag'?: string | null;
    'dropdownOptions'?: Array<string> | null;
    'textAlign'?: DocumentFormFields.TextAlignEnum;
    'textDirection'?: DocumentFormFields.TextDirectionEnum;
    'characterSpacing'?: number;
    'backgroundHexColor'?: string | null;
    'tabIndex'?: number;
    'formulaFieldSettings'?: FormulaFieldSettings;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "font",
            "baseName": "font",
            "type": "string"
        },
        {
            "name": "isRequired",
            "baseName": "isRequired",
            "type": "boolean"
        },
        {
            "name": "isReadOnly",
            "baseName": "isReadOnly",
            "type": "boolean"
        },
        {
            "name": "lineHeight",
            "baseName": "lineHeight",
            "type": "number"
        },
        {
            "name": "fontSize",
            "baseName": "fontSize",
            "type": "number"
        },
        {
            "name": "fontColor",
            "baseName": "fontColor",
            "type": "string"
        },
        {
            "name": "isUnderline",
            "baseName": "isUnderline",
            "type": "boolean"
        },
        {
            "name": "isItalic",
            "baseName": "isItalic",
            "type": "boolean"
        },
        {
            "name": "isBold",
            "baseName": "isBold",
            "type": "boolean"
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "placeholder",
            "baseName": "placeholder",
            "type": "string"
        },
        {
            "name": "validationtype",
            "baseName": "validationtype",
            "type": "DocumentFormFields.ValidationtypeEnum"
        },
        {
            "name": "validationCustomRegex",
            "baseName": "validationCustomRegex",
            "type": "string"
        },
        {
            "name": "validationCustomRegexMessage",
            "baseName": "validationCustomRegexMessage",
            "type": "string"
        },
        {
            "name": "dateFormat",
            "baseName": "dateFormat",
            "type": "string"
        },
        {
            "name": "timeFormat",
            "baseName": "timeFormat",
            "type": "string"
        },
        {
            "name": "imageInfo",
            "baseName": "imageInfo",
            "type": "ImageInfo"
        },
        {
            "name": "attachmentInfo",
            "baseName": "attachmentInfo",
            "type": "AttachmentInfo"
        },
        {
            "name": "fileInfo",
            "baseName": "fileInfo",
            "type": "FileInfo"
        },
        {
            "name": "editableDateFieldSettings",
            "baseName": "editableDateFieldSettings",
            "type": "EditableDateFieldSettings"
        },
        {
            "name": "hyperlinkText",
            "baseName": "hyperlinkText",
            "type": "string"
        },
        {
            "name": "conditionalRules",
            "baseName": "conditionalRules",
            "type": "Array<ConditionalRule>"
        },
        {
            "name": "bounds",
            "baseName": "bounds",
            "type": "Rectangle"
        },
        {
            "name": "pageNumber",
            "baseName": "pageNumber",
            "type": "number"
        },
        {
            "name": "dataSyncTag",
            "baseName": "dataSyncTag",
            "type": "string"
        },
        {
            "name": "dropdownOptions",
            "baseName": "dropdownOptions",
            "type": "Array<string>"
        },
        {
            "name": "textAlign",
            "baseName": "textAlign",
            "type": "DocumentFormFields.TextAlignEnum"
        },
        {
            "name": "textDirection",
            "baseName": "textDirection",
            "type": "DocumentFormFields.TextDirectionEnum"
        },
        {
            "name": "characterSpacing",
            "baseName": "characterSpacing",
            "type": "number"
        },
        {
            "name": "backgroundHexColor",
            "baseName": "backgroundHexColor",
            "type": "string"
        },
        {
            "name": "tabIndex",
            "baseName": "tabIndex",
            "type": "number"
        },
        {
            "name": "formulaFieldSettings",
            "baseName": "formulaFieldSettings",
            "type": "FormulaFieldSettings"
        }    ];

    static getAttributeTypeMap() {
        return DocumentFormFields.attributeTypeMap;
    }
}

export namespace DocumentFormFields {
    export enum ValidationtypeEnum {
        None = <any> 'None',
        NumbersOnly = <any> 'NumbersOnly',
        EmailAddress = <any> 'EmailAddress',
        Currency = <any> 'Currency',
        CustomRegex = <any> 'CustomRegex'
    }
    export enum TextAlignEnum {
        Left = <any> 'Left',
        Center = <any> 'Center',
        Right = <any> 'Right'
    }
    export enum TextDirectionEnum {
        Ltr = <any> 'LTR',
        Rtl = <any> 'RTL'
    }
}
