/**
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AttachmentInfo } from './attachmentInfo';
import { Font } from './font';
import { FormulaFieldSettings } from './formulaFieldSettings';
import { ImageInfo } from './imageInfo';
import { Size } from './size';
import { TextTagOffset } from './textTagOffset';
import { Validation } from './validation';

export class TextTagDefinition {
    'definitionId': string;
    'type': TextTagDefinition.TypeEnum;
    'signerIndex': number;
    'isRequired'?: boolean;
    'placeholder'?: string | null;
    'fieldId'?: string | null;
    'font'?: Font;
    'validation'?: Validation;
    'size'?: Size;
    'dateFormat'?: string | null;
    'timeFormat'?: string | null;
    'radioGroupName'?: string | null;
    'groupName'?: string | null;
    'value'?: string | null;
    'dropdownOptions'?: Array<string> | null;
    'imageInfo'?: ImageInfo;
    'hyperlinkText'?: string | null;
    'attachmentInfo'?: AttachmentInfo;
    'backgroundHexColor'?: string | null;
    'isReadOnly'?: boolean;
    'offset'?: TextTagOffset;
    'label'?: string | null;
    'tabIndex'?: number | null;
    'dataSyncTag'?: string | null;
    'textAlign'?: TextTagDefinition.TextAlignEnum;
    'textDirection'?: TextTagDefinition.TextDirectionEnum;
    'characterSpacing'?: number;
    'characterLimit'?: number;
    'formulaFieldSettings'?: FormulaFieldSettings;
    'resizeOption'?: TextTagDefinition.ResizeOptionEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "definitionId",
            "baseName": "definitionId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "TextTagDefinition.TypeEnum"
        },
        {
            "name": "signerIndex",
            "baseName": "signerIndex",
            "type": "number"
        },
        {
            "name": "isRequired",
            "baseName": "isRequired",
            "type": "boolean"
        },
        {
            "name": "placeholder",
            "baseName": "placeholder",
            "type": "string"
        },
        {
            "name": "fieldId",
            "baseName": "fieldId",
            "type": "string"
        },
        {
            "name": "font",
            "baseName": "font",
            "type": "Font"
        },
        {
            "name": "validation",
            "baseName": "validation",
            "type": "Validation"
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "Size"
        },
        {
            "name": "dateFormat",
            "baseName": "dateFormat",
            "type": "string"
        },
        {
            "name": "timeFormat",
            "baseName": "timeFormat",
            "type": "string"
        },
        {
            "name": "radioGroupName",
            "baseName": "radioGroupName",
            "type": "string"
        },
        {
            "name": "groupName",
            "baseName": "groupName",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "dropdownOptions",
            "baseName": "dropdownOptions",
            "type": "Array<string>"
        },
        {
            "name": "imageInfo",
            "baseName": "imageInfo",
            "type": "ImageInfo"
        },
        {
            "name": "hyperlinkText",
            "baseName": "hyperlinkText",
            "type": "string"
        },
        {
            "name": "attachmentInfo",
            "baseName": "attachmentInfo",
            "type": "AttachmentInfo"
        },
        {
            "name": "backgroundHexColor",
            "baseName": "backgroundHexColor",
            "type": "string"
        },
        {
            "name": "isReadOnly",
            "baseName": "isReadOnly",
            "type": "boolean"
        },
        {
            "name": "offset",
            "baseName": "offset",
            "type": "TextTagOffset"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "tabIndex",
            "baseName": "tabIndex",
            "type": "number"
        },
        {
            "name": "dataSyncTag",
            "baseName": "dataSyncTag",
            "type": "string"
        },
        {
            "name": "textAlign",
            "baseName": "textAlign",
            "type": "TextTagDefinition.TextAlignEnum"
        },
        {
            "name": "textDirection",
            "baseName": "textDirection",
            "type": "TextTagDefinition.TextDirectionEnum"
        },
        {
            "name": "characterSpacing",
            "baseName": "characterSpacing",
            "type": "number"
        },
        {
            "name": "characterLimit",
            "baseName": "characterLimit",
            "type": "number"
        },
        {
            "name": "formulaFieldSettings",
            "baseName": "formulaFieldSettings",
            "type": "FormulaFieldSettings"
        },
        {
            "name": "resizeOption",
            "baseName": "resizeOption",
            "type": "TextTagDefinition.ResizeOptionEnum"
        }    ];

    static getAttributeTypeMap() {
        return TextTagDefinition.attributeTypeMap;
    }
}

export namespace TextTagDefinition {
    export enum TypeEnum {
        Signature = <any> 'Signature',
        Initial = <any> 'Initial',
        CheckBox = <any> 'CheckBox',
        TextBox = <any> 'TextBox',
        Label = <any> 'Label',
        DateSigned = <any> 'DateSigned',
        RadioButton = <any> 'RadioButton',
        Image = <any> 'Image',
        Attachment = <any> 'Attachment',
        EditableDate = <any> 'EditableDate',
        Hyperlink = <any> 'Hyperlink',
        Dropdown = <any> 'Dropdown',
        Title = <any> 'Title',
        Company = <any> 'Company',
        Formula = <any> 'Formula'
    }
    export enum TextAlignEnum {
        Left = <any> 'Left',
        Center = <any> 'Center',
        Right = <any> 'Right'
    }
    export enum TextDirectionEnum {
        Ltr = <any> 'LTR',
        Rtl = <any> 'RTL'
    }
    export enum ResizeOptionEnum {
        GrowVertically = <any> 'GrowVertically',
        GrowHorizontally = <any> 'GrowHorizontally',
        GrowBoth = <any> 'GrowBoth',
        Fixed = <any> 'Fixed',
        AutoResizeFont = <any> 'AutoResizeFont'
    }
}
