/**
 * BoldSign API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AuthenticationSettings } from './authenticationSettings';
import { ExistingFormField } from './existingFormField';
import { FormField } from './formField';
import { IdentityVerificationSettings } from './identityVerificationSettings';
import { PhoneNumber } from './phoneNumber';
import { RecipientNotificationSettings } from './recipientNotificationSettings';

export class Role {
    'roleIndex'?: number | null;
    'signerName'?: string | null;
    'signerOrder'?: number;
    'signerEmail'?: string | null;
    'hostEmail'?: string | null;
    'privateMessage'?: string | null;
    'authenticationCode'?: string | null;
    'enableEmailOTP'?: boolean;
    'authenticationType'?: Role.AuthenticationTypeEnum;
    'phoneNumber'?: PhoneNumber;
    'deliveryMode'?: Role.DeliveryModeEnum;
    'signerType'?: Role.SignerTypeEnum;
    'signerRole'?: string | null;
    'allowFieldConfiguration'?: boolean | null;
    'formFields'?: Array<FormField> | null;
    'existingFormFields'?: Array<ExistingFormField> | null;
    'identityVerificationSettings'?: IdentityVerificationSettings;
    /**
    * <p>Description:</p><ul><li><i>0</i> - None</li><li><i>1</i> - English</li><li><i>2</i> - Spanish</li><li><i>3</i> - German</li><li><i>4</i> - French</li><li><i>5</i> - Romanian</li><li><i>6</i> - Norwegian</li><li><i>7</i> - Bulgarian</li><li><i>8</i> - Italian</li><li><i>9</i> - Danish</li><li><i>10</i> - Polish</li><li><i>11</i> - Portuguese</li><li><i>12</i> - Czech</li><li><i>13</i> - Dutch</li><li><i>14</i> - Swedish</li><li><i>15</i> - Russian</li></ul>
    */
    'language'?: Role.LanguageEnum;
    'locale'?: Role.LocaleEnum;
    'recipientNotificationSettings'?: RecipientNotificationSettings;
    'authenticationRetryCount'?: number | null;
    'enableQes'?: boolean | null;
    'authenticationSettings'?: AuthenticationSettings;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "roleIndex",
            "baseName": "roleIndex",
            "type": "number"
        },
        {
            "name": "signerName",
            "baseName": "signerName",
            "type": "string"
        },
        {
            "name": "signerOrder",
            "baseName": "signerOrder",
            "type": "number"
        },
        {
            "name": "signerEmail",
            "baseName": "signerEmail",
            "type": "string"
        },
        {
            "name": "hostEmail",
            "baseName": "hostEmail",
            "type": "string"
        },
        {
            "name": "privateMessage",
            "baseName": "privateMessage",
            "type": "string"
        },
        {
            "name": "authenticationCode",
            "baseName": "authenticationCode",
            "type": "string"
        },
        {
            "name": "enableEmailOTP",
            "baseName": "enableEmailOTP",
            "type": "boolean"
        },
        {
            "name": "authenticationType",
            "baseName": "authenticationType",
            "type": "Role.AuthenticationTypeEnum"
        },
        {
            "name": "phoneNumber",
            "baseName": "phoneNumber",
            "type": "PhoneNumber"
        },
        {
            "name": "deliveryMode",
            "baseName": "deliveryMode",
            "type": "Role.DeliveryModeEnum"
        },
        {
            "name": "signerType",
            "baseName": "signerType",
            "type": "Role.SignerTypeEnum"
        },
        {
            "name": "signerRole",
            "baseName": "signerRole",
            "type": "string"
        },
        {
            "name": "allowFieldConfiguration",
            "baseName": "allowFieldConfiguration",
            "type": "boolean"
        },
        {
            "name": "formFields",
            "baseName": "formFields",
            "type": "Array<FormField>"
        },
        {
            "name": "existingFormFields",
            "baseName": "existingFormFields",
            "type": "Array<ExistingFormField>"
        },
        {
            "name": "identityVerificationSettings",
            "baseName": "identityVerificationSettings",
            "type": "IdentityVerificationSettings"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "Role.LanguageEnum"
        },
        {
            "name": "locale",
            "baseName": "locale",
            "type": "Role.LocaleEnum"
        },
        {
            "name": "recipientNotificationSettings",
            "baseName": "recipientNotificationSettings",
            "type": "RecipientNotificationSettings"
        },
        {
            "name": "authenticationRetryCount",
            "baseName": "authenticationRetryCount",
            "type": "number"
        },
        {
            "name": "enableQes",
            "baseName": "enableQes",
            "type": "boolean"
        },
        {
            "name": "authenticationSettings",
            "baseName": "authenticationSettings",
            "type": "AuthenticationSettings"
        }    ];

    static getAttributeTypeMap() {
        return Role.attributeTypeMap;
    }
}

export namespace Role {
    export enum AuthenticationTypeEnum {
        None = <any> 'None',
        EmailOtp = <any> 'EmailOTP',
        AccessCode = <any> 'AccessCode',
        Smsotp = <any> 'SMSOTP',
        IdVerification = <any> 'IdVerification'
    }
    export enum DeliveryModeEnum {
        Email = <any> 'Email',
        Sms = <any> 'SMS',
        EmailAndSms = <any> 'EmailAndSMS',
        WhatsApp = <any> 'WhatsApp'
    }
    export enum SignerTypeEnum {
        Signer = <any> 'Signer',
        Reviewer = <any> 'Reviewer',
        InPersonSigner = <any> 'InPersonSigner'
    }
    export enum LanguageEnum {
        NUMBER_0 = <any> 0,
        NUMBER_1 = <any> 1,
        NUMBER_2 = <any> 2,
        NUMBER_3 = <any> 3,
        NUMBER_4 = <any> 4,
        NUMBER_5 = <any> 5,
        NUMBER_6 = <any> 6,
        NUMBER_7 = <any> 7,
        NUMBER_8 = <any> 8,
        NUMBER_9 = <any> 9,
        NUMBER_10 = <any> 10,
        NUMBER_11 = <any> 11,
        NUMBER_12 = <any> 12,
        NUMBER_13 = <any> 13,
        NUMBER_14 = <any> 14,
        NUMBER_15 = <any> 15
    }
    export enum LocaleEnum {
        En = <any> 'EN',
        No = <any> 'NO',
        Fr = <any> 'FR',
        De = <any> 'DE',
        Es = <any> 'ES',
        Bg = <any> 'BG',
        Cs = <any> 'CS',
        Da = <any> 'DA',
        It = <any> 'IT',
        Nl = <any> 'NL',
        Pl = <any> 'PL',
        Pt = <any> 'PT',
        Ro = <any> 'RO',
        Ru = <any> 'RU',
        Sv = <any> 'SV',
        Default = <any> 'Default'
    }
}
